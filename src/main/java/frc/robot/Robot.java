// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;

import com.pathplanner.lib.server.PathPlannerServer;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in
 * the project.
 */
public class Robot extends TimedRobot {

    private Command m_autonomousCommand;

    private RobotContainer m_robotContainer;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        /**
         * Instantiate our RobotContainer. This will perform all our button bindings,
         * And put our autonomous chooser on the dashboard.
         */

        // Start camera server
        // CameraServer.startAutomaticCapture();

        m_robotContainer = RobotContainer.getInstance();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);

        RobotContainer.getInstance().m_drivetrain.setBrake();

        // Comment out for comp. PathPlanner live feed.
        // PathPlannerServer.startServer(5811);

        ValueModifier();
    }

    private void ValueModifier() {
        /**
         * Value modifier is for testing, disable or comment out in comp.
         * Put volt constants into temp constants
         */
        // SmartDashboard.putNumber("ksVolts", Constants.SysIDConstants.ksVolts);
        // SmartDashboard.putNumber("kvVoltSecondsPerMeter",
        // Constants.SysIDConstants.kvVoltSecondsPerMeter);
        // SmartDashboard.putNumber("kaVoltSecondsSquaredPerMeter",
        // Constants.SysIDConstants.kaVoltSecondsSquaredPerMeter);

        // // Put PID values into temp constants
        // SmartDashboard.putNumber("kPDriveVel", Constants.SysIDConstants.kPDriveVel);
        // SmartDashboard.putNumber("kIDriveVel", Constants.SysIDConstants.kIDriveVel);
        // SmartDashboard.putNumber("kDDriveVel", Constants.SysIDConstants.kDDriveVel);

        // // Put max speed and acceleration into temp constants
        // SmartDashboard.putNumber("kMaxSpeedMetersPerSecond",
        // Constants.SysIDConstants.kMaxSpeedMetersPerSecond);
        // SmartDashboard.putNumber("kMaxAccelerationMetersPerSecondSquared",
        // Constants.SysIDConstants.kMaxAccelerationMetersPerSecondSquared);
    }

    /**
     * This function is called every robot packet, no matter the mode. Use this for
     * Items like
     * Diagnostics that you want ran during disabled, autonomous, teleoperated and
     * Test.
     *
     * <p>
     * This runs after the mode specific periodic functions, but before
     * LiveWindow and SmartDashboard integrated updating.
     */
    @Override
    public void robotPeriodic() {
        /**
         * Runs the Scheduler. This is responsible for polling buttons, adding
         * Newly-scheduled commands, running already-scheduled commands,
         * Removing finished or interrupted commands, and running subsystem
         * Periodic() methods. This must be called from the robot's periodic
         * Block in order for anything in the Command-based framework to work.
         */
        CommandScheduler.getInstance().run();
    }

    /**
     * This function is called once each time the robot enters Disabled mode.
     */
    @Override
    public void disabledInit() {
        RobotContainer.getInstance().m_drivetrain.setCoast();
        RobotContainer.getInstance().m_magicArm.setCoastMode();
    }

    @Override
    public void disabledPeriodic() {
    }

    /**
     * This autonomous runs the autonomous command selected by your
     * {@link RobotContainer} class.
     */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        RobotContainer.getInstance().m_drivetrain.setBrake();

        // Schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }
    }

    /**
     * This function is called periodically during autonomous.
     */
    @Override
    public void autonomousPeriodic() {
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        RobotContainer.getInstance().m_drivetrain.setBrake();
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }
    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {
    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    // This function is called periodically during test mode.
    @Override
    public void testPeriodic() {
    }

}
