// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.SPI;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX leftFrontMotor;
private WPI_TalonSRX leftRearMotor;
private MotorControllerGroup left;
private WPI_TalonSRX rightFrontMotor;
private WPI_TalonSRX rightRearMotor;
private MotorControllerGroup right;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DifferentialDrive differentialDrive;
    private AHRS navx;
    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFrontMotor = new WPI_TalonSRX(0);
 
 

leftRearMotor = new WPI_TalonSRX(1);
 
 

left = new MotorControllerGroup(leftFrontMotor, leftRearMotor  );
 addChild("left",left);
 

rightFrontMotor = new WPI_TalonSRX(2);
 
 

rightRearMotor = new WPI_TalonSRX(3);
 
 

right = new MotorControllerGroup(rightFrontMotor, rightRearMotor  );
 addChild("right",right);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    navx = new AHRS(SPI.Port.kMXP);
    differentialDrive = new DifferentialDrive(left, right);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
/* Display 6-axis Processed Angle Data */
SmartDashboard.putBoolean("IMU_Connected", navx.isConnected());
SmartDashboard.putNumber("IMU_Yaw", navx.getYaw());
SmartDashboard.putNumber("IMU_Pitch", navx.getPitch());

// displays encoder ticks
SmartDashboard.putNumber("Left Encoder", getLeftEncoder());
SmartDashboard.putNumber("Right Encoder", getRightEncoder());

SmartDashboard.putNumber("Get Heading", getHeading());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void run(double l, double r) {
      // runs numbers from joystick y axis
      left.set(l);
      right.set(r);
    }
    public void runDifferential(double l, double r) {
      differentialDrive.tankDrive(l, r);
    }

    public double getLeftEncoder() {
      return leftFrontMotor.getSelectedSensorPosition();
    }
  
    public double getRightEncoder() {
      return rightFrontMotor.getSelectedSensorPosition();
    }

    public void setBrake() {
      leftFrontMotor.setNeutralMode(NeutralMode.Brake);
      leftRearMotor.setNeutralMode(NeutralMode.Brake);
  
      rightFrontMotor.setNeutralMode(NeutralMode.Brake);
      rightRearMotor.setNeutralMode(NeutralMode.Brake);
    }
  
    public void setCoast() {
      leftFrontMotor.setNeutralMode(NeutralMode.Coast);
      leftRearMotor.setNeutralMode(NeutralMode.Coast);
  
      rightFrontMotor.setNeutralMode(NeutralMode.Coast);
      rightRearMotor.setNeutralMode(NeutralMode.Coast);
    }

    public double getHeading() {
      return navx.getRotation2d().getDegrees();
    }
}

