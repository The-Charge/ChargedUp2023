// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;

import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.MagicArm;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class MoveMagicArmToXY extends CommandBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final MagicArm m_magicArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // These are the extra variables required to run the MoveMagicArmToXY command
    private double m_X, m_Y;
    private boolean canMove = true;
    private long startTime = 0;
    private long m_timeOut;

    /**
     * Move armtip so that it is the same depth as when the robot is straight
     * against the goal.
     * 
     * @param subsystem  MagicArm subsystem used in this command.
     * @param _x         Arm X position to travel to in meters.
     * @param _y         Arm Y position to travel to in meters.
     * @param _timeoutMS Timeout in milliseconds.
     */
    public MoveMagicArmToXY(MagicArm subsystem, double _x, double _y, long _timeOutMs) {
        m_X = _x;
        m_Y = _y;
        m_magicArm = subsystem;
        m_timeOut = _timeOutMs;
        addRequirements(m_magicArm);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        startTime = System.currentTimeMillis();
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // Move if there is a path, and no joysticks movement and not timed out.
        canMove = m_magicArm.moveTowardXY(m_X, m_Y) &&
                Math.abs(RobotContainer.getInstance().getArmController().getRawAxis(1)) < 0.2 &&
                Math.abs(RobotContainer.getInstance().getArmController().getRawAxis(3)) < 0.2 &&
                System.currentTimeMillis() - startTime < m_timeOut;
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        canMove = false;
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        // Command ends when arm can't move or at destination.
        double deltaX = m_magicArm.getX() - m_X;
        double deltaY = m_magicArm.getY() - m_Y;
        return ((deltaX * deltaX + deltaY * deltaY < 0.001) || (!canMove));
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
