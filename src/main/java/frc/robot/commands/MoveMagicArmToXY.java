// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.CommandBase;

import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.MagicArm;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class MoveMagicArmToXY extends CommandBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final MagicArm magicArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // These are the extra variables required to run the MoveMagicArmToXY command
    private double x, y;
    private long timeOutMs;
    private Timer timer;
    private double ARM_IN_LIMITS = .0008; /*
                                           * Units are in Meters but is this REALLY .03 inches?
                                           * these constants should go in constants folder
                                           */
    private double JOYSTICK_NEUTRAL = .2;

    public MoveMagicArmToXY(MagicArm subsystem, double x, double y, long timeOutMs) {

        magicArm = subsystem;
        addRequirements(magicArm);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        timer.reset();  // not sure I need to reset but it can't hurt
        timer.start();
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        magicArm.moveTowardXY(x, y); // Should this be in execute or in initialize?
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() { // The subsystem should really be determining when the arm movement is finished
        double[] xy = magicArm.getXY();
        return !magicArm.moveTowardXY(x, y) || // function returns false if a valid solution cannot be found
                (xy[0] - x) * (xy[0] - x) + (xy[1] - y) * (xy[1] - y) < ARM_IN_LIMITS ||
                Math.abs(RobotContainer.getInstance().getArmController().getRawAxis(1)) > JOYSTICK_NEUTRAL ||  // probably should be a method to detect manual arm controls
                Math.abs(RobotContainer.getInstance().getArmController().getRawAxis(3)) > JOYSTICK_NEUTRAL ||
                timer.hasElapsed(timeOutMs);
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
