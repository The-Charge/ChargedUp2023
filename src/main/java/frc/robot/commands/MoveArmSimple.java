// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.MagicArm;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class MoveArmSimple extends CommandBase {

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
  private final MagicArm m_magicArm;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

  // These are the extra variables required to run the MoveArmSimple command
  private double targetX;
  private double targetY;
  private boolean joyStickMoved = false;
  private double deltaScale = 175.0;

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

  public MoveArmSimple(MagicArm subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    m_magicArm = subsystem;
    addRequirements(m_magicArm);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    double[] xy = m_magicArm.getXY();
    targetX = xy[0];
    targetY = xy[1];
    joyStickMoved = false;
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    double xSpeed = -RobotContainer.getInstance().getarmController().getRawAxis(1) / 250;
    double ySpeed = -RobotContainer.getInstance().getarmController().getRawAxis(3) / 250;

    if (Math.abs(xSpeed) < (0.1 / deltaScale)) {
      xSpeed = 0;
    } else {
      joyStickMoved = true;
    }

    if (Math.abs(ySpeed) < (0.1 / deltaScale)) {
      ySpeed = 0;
    } else {
      joyStickMoved = true;
    }

    if (Math.abs(xSpeed) < (0.1 / deltaScale) && Math.abs(ySpeed) < (0.1 / deltaScale) && joyStickMoved) {
      double[] xy = m_magicArm.getXY();
      targetX = xy[0];
      targetY = xy[1];
      joyStickMoved = false;
    }

    targetX = m_magicArm.getLimitX(targetX + xSpeed);
    targetY = m_magicArm.getLimitY(targetX, targetY + ySpeed);

    m_magicArm.moveTowardXY(targetX, targetY);

    SmartDashboard.putNumber("targetX", targetX / 0.0254);
    SmartDashboard.putNumber("targetY", targetY / 0.0254 + 11);
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
  }

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }

  @Override
  public boolean runsWhenDisabled() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
  }
}
