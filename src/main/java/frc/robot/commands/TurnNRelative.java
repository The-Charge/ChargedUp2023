// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import java.util.function.DoubleSupplier;

import com.ctre.phoenix.motorcontrol.ControlMode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Drivetrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TurnNRelative extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Drivetrain m_drivetrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double finalDegrees;
    private double degreesToTurn;
    // private PIDController controller;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public TurnNRelative(Drivetrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrain = subsystem;
        addRequirements(m_drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        double degreesInitial = m_drivetrain.getHeading();
        finalDegrees = degreesInitial + degreesToTurn;
        SmartDashboard.putNumber("final degree", finalDegrees);
        // controller = new PIDController(0.5, 0.00, 0.0);
        // controller.enableContinuousInput(-180.0, 180.0);
        // controller.setTolerance(1.0);
        // controller.setSetpoint(finalDegrees);
        // SmartDashboard.putNumber("Setpoint", finalDegrees);
        // m_drivetrain.setControlMode(ControlMode.PercentOutput);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // double output = controller.calculate(m_drivetrain.getHeading());
        // MathUtil.clamp(output, -0.5, 0.5);
        // int sign = (int) Math.signum(output);
        // double minSpeed = 0.05;
        // output = sign * Math.max(minSpeed, Math.abs(output));
        // SmartDashboard.putNumber("output", output);
        // SmartDashboard.putNumber("Angle", m_drivetrain.getHeading());
        // m_drivetrain.run(output, -1 * output);

        double leftSpeed = 0, rightSpeed = 0; // Individual left/right speeds
        double speed = 0; // Overall speed variable

        if (finalDegrees - m_drivetrain.getHeading() < 15) { // lower speed
            speed = .6;
        } else if (finalDegrees - m_drivetrain.getHeading() < 25) { // slowing speed
            speed = .7;
        } else { // higher speed
            speed = .8;
        }
        if (finalDegrees - m_drivetrain.getHeading() > 0) { // check which turn direction
            leftSpeed = speed;
            rightSpeed = -1 * speed;
            SmartDashboard.putString("Direction", "Right");
        } else if (finalDegrees - m_drivetrain.getHeading() > 0) {
            leftSpeed = -1 * speed;
            rightSpeed = speed;
            SmartDashboard.putString("Direction", "Left");
        } else {
            leftSpeed = 0;
            rightSpeed = 0;
            SmartDashboard.putString("Direction", "None");
        }

        m_drivetrain.run(leftSpeed, rightSpeed);
        SmartDashboard.putNumber("Distance to travel", finalDegrees - m_drivetrain.getHeading());
        SmartDashboard.putNumber("Speed", speed);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if (Math.abs(Math.abs(finalDegrees) - Math.abs(m_drivetrain.getHeading())) < 3) { // below error of 3 degrees
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
