// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj2.command.CommandBase;

import com.ctre.phoenix.motorcontrol.ControlMode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Drivetrain;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class TurnNRelative extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final Drivetrain m_drivetrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double finalDegrees;
    private double degreesToTurn;
    private PIDController controller;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    /**
    * Turn the robot for x amount of degrees
    * 
    * @param subsystem   The Drivetrain subsystem used in this command.
    * @param degrees     Degrees to turn (relative).
    */
    public TurnNRelative(Drivetrain subsystem, double degrees) {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrain = subsystem;
        degreesToTurn = degrees;
        addRequirements(m_drivetrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        // Get current degrees and calculate where to turn to.
        double degreesInitial = m_drivetrain.getHeading();
        finalDegrees = degreesInitial + degreesToTurn;

        // PID controller for turn.
        controller = new PIDController(0.01, 0.00, 0.0);
        controller.setTolerance(10.0);
        controller.setSetpoint(finalDegrees);
        
        m_drivetrain.setControlMode(ControlMode.PercentOutput);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        /*
         * Calculate speed to travel at, accounting for sign and 
         * ensuring that robot travels above minimum speed for rotation.
         */
        double output = controller.calculate(m_drivetrain.getHeading());
        int sign = (int) Math.signum(output);
        double minSpeed = 0.75;
        output = sign * Math.max(minSpeed, Math.abs(output));

        // Feed speed output into Drivetrain.
        m_drivetrain.run(-1 * output, output); 
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        // Command finishes once the robot is within 5 degrees of target.
        if (Math.abs(finalDegrees - m_drivetrain.getHeading()) < 5) {
            return true;
        } 
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
